@model DataVerse.Models.CustomerVM


<div class="modal fade" id="addCustomerModal" aria-labelledby="addCustomerLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            
            <form action="@Url.Action("Create","Customers")" id="addCustomerForm" method="post">
                <div class="modal-header">
                    <h2 class="modal-title">Insert new Customer</h2>
                </div>
                <div class="modal-body">
                    <div class="form-errors" style="color:orangered"></div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.FirstName)
                        @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.LastName)
                        @Html.TextBoxFor(m => m.LastName, new { @class = "form-control" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.Address)
                        @Html.TextBoxFor(m => m.Address, new { @class = "form-control" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.email)
                        @Html.TextBoxFor(m => m.email, new { @class = "form-control" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.HomePhone)
                        @Html.TextBoxFor(m => m.HomePhone, new { @name = "HomePhone", @id = "HomePhone", @class = "form-control phonegroup" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.WorkPhone)
                        @Html.TextBoxFor(m => m.WorkPhone, new { @name = "WorkPhone", @id = "WorkPhone", @class = "form-control phonegroup" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.CellPhone)
                        @Html.TextBoxFor(m => m.CellPhone, new { @name = "CellPhone", @id = "CellPhone ", @class = "form-control phonegroup" })
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" value="validate" class="btn btn-primary" id="btnSubmit">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>
<script src="~/Scripts/jquery-3.4.1.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script>
    $(function () {
        jQuery.validator.addMethod("lettersonly", function (value, element) {
            return this.optional(element) || /^[a-z0-9α-ω ]+$/i.test(value);
        }, "Please enter letters only.");
        // Initialize form validation on the registration form.
        // It has the name attribute "registration"
        $("#addCustomerForm").validate({
            errorLabelContainer: ".form-errors",
            groups: {
                phone: "HomePhone WorkPhone CellPhone"
            },
            // Specify validation rules
            rules: {
                // The key name on the left side is the name attribute
                // of an input field. Validation rules are defined
                // on the right side
                FirstName: { required: true, lettersonly: true },
                LastName: { required: true, lettersonly: true },
                Address: { required: true } ,
                email: { required: true, email: true },

                HomePhone: {
                    require_from_group: [1, ".phonegroup"],
                    pattern: /[0-9]{10}/
                },
                WorkPhone: {
                    require_from_group: [1, ".phonegroup"],
                    pattern: /[0-9]{10}/
                },
                CellPhone: {
                    require_from_group: [1, ".phonegroup"],
                    pattern: /[0-9]{10}/
                }
            },
            // Specify validation error messages
            messages: {
                FirstName: "Please enter your first name. ",
                LastName: "Please enter your last name. ",
                Address: "Please enter your Address. ",
                email: "Please enter your Email. ",

                HomePhone: {
                    require_from_group: "You must either fill home/work/mobile number. "
                },
                WorkPhone: {
                    require_from_group: "You must either fill home/work/mobile number. "
                },
                CellPhone: {
                    require_from_group: "You must either fill home/work/mobile number. "
                },

            },
            invalidHandler: function (e, validator) {
                //validator.errorList contains an array of objects, where each object has properties "element" and "message".  element is the actual HTML Input.
                for (var i = 0; i < validator.errorList.length; i++) {
                    console.log(validator.errorList[i]);
                }

                //validator.errorMap is an object mapping input names -> error messages
                for (var i in validator.errorMap) {
                    console.log(i, ":", validator.errorMap[i]);
                }
            },
            // Make sure the form is submitted to the destination defined
            // in the "action" attribute of the form when valid
            submitHandler: function (form) {
                form.submit();
            }
        });
    });

</script>